// <auto-generated />
using System;
using Dfe.Academies.Academisation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dfe.Academies.Academisation.Data.Migrations
{
    [DbContext(typeof(AcademisationContext))]
    [Migration("20240902134104_Add-UserRole-Entity")]
    partial class AddUserRoleEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationReference")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("'A2B_' + CAST([Id] AS NVARCHAR(255))", true);

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApplicationSubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FormTrustId")
                        .HasColumnType("int");

                    b.Property<int?>("JoinTrustId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormTrustId")
                        .IsUnique()
                        .HasFilter("[FormTrustId] IS NOT NULL");

                    b.HasIndex("JoinTrustId")
                        .IsUnique()
                        .HasFilter("[JoinTrustId] IS NOT NULL");

                    b.ToTable("ConversionApplication", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConversionApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversionApplicationId");

                    b.ToTable("ConversionApplicationContributor", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.Lease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationSchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsSchoolLeaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaseTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaymentsToDate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RepaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ResponsibleForAssets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueOfAssets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSchoolId");

                    b.ToTable("ApplicationSchoolLease", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ApplicationSchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsSchoolLoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSchoolId");

                    b.ToTable("ApplicationSchoolLoan", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConversionApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DioceseFolderIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DioceseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DynamicsApplyingSchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExemptionEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FoundationConsentFolderIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoundationTrustOrBodyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FurtherInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasLeases")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLoans")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalAuthorityClosurePlanDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalAuthorityReorganisationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainFeederSchools")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfstedInspectionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PartOfFederation")
                        .HasColumnType("bit");

                    b.Property<int?>("ProtectedCharacteristics")
                        .HasColumnType("int");

                    b.Property<string>("ResolutionConsentFolderIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Safeguarding")
                        .HasColumnType("bit");

                    b.Property<string>("TrustBenefitDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversionApplicationId");

                    b.ToTable("ApplicationSchool", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.FormTrust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApplicationFormTrust", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.JoinTrust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ChangesToLaGovernance")
                        .HasColumnType("bit");

                    b.Property<string>("ChangesToLaGovernanceExplained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChangesToTrust")
                        .HasColumnType("int");

                    b.Property<string>("ChangesToTrustExplained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrustName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrustReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UKPRN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationJoinTrust", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.TrustKeyPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationFormTrustId")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DynamicsKeyPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormTrustId");

                    b.ToTable("ApplicationFormTrustKeyPerson", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.TrustKeyPersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationFormTrustKeyPersonRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("TimeInRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormTrustKeyPersonRoleId");

                    b.ToTable("ApplicationFormTrustKeyPersonRole", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConversionAdvisoryBoardDecision", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDAORevokedReasonDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoryBoardDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoryBoardDecisionId");

                    b.ToTable("AdvisoryBoardDecisionDAORevokedReason", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDeclinedReasonDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoryBoardDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoryBoardDecisionId");

                    b.ToTable("ConversionAdvisoryBoardDecisionDeclinedReason", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDeferredReasonDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoryBoardDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoryBoardDecisionId");

                    b.ToTable("ConversionAdvisoryBoardDecisionDeferredReason", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardWithdrawnReasonDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoryBoardDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoryBoardDecisionId");

                    b.ToTable("AdvisoryBoardDecisionWithdrawnReason", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.ProjectNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectNotes", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.FormAMatProjectAggregate.FormAMatProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProposedTrustName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormAMatProject", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.OpeningDateHistoryAggregate.OpeningDateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonsChanged")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpeningDateHistories", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectAggregate.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApplicationSharePointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FormAMatProjectId")
                        .HasColumnType("int")
                        .HasColumnName("FormAMatProjectId");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectGroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SchoolSharePointId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Project", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectAggregate.SchoolImprovementPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArrangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrangedByOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfidenceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpectedEndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedEndDateOther")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProvidedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolImprovementPlans", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectGroupsAggregate.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrustName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrustReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrustUkprn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectGroups", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.IntendedTransferBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SelectedBenefit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferProjectId");

                    b.ToTable("IntendedTransferBenefit", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.TransferProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 10003000L);

                    b.Property<bool?>("AnyRisks")
                        .HasColumnType("bit");

                    b.Property<string>("AssignedUserEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BenefitsSectionIsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ComplexLandAndBuildingFurtherSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ComplexLandAndBuildingShouldBeConsidered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiocesanConsent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EqualitiesImpactAssessmentConsidered")
                        .HasColumnType("bit");

                    b.Property<bool?>("FeatureSectionIsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("FinanceAndDebtFurtherSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FinanceAndDebtShouldBeConsidered")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasHtbDate")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTargetDateForTransfer")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTransferFirstDiscussedDate")
                        .HasColumnType("bit");

                    b.Property<string>("HighProfileFurtherSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HighProfileShouldBeConsidered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HtbDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncomingTrustAgreement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFormAMat")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("LegalRequirementsSectionIsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("OtherBenefitValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherRisksFurtherSpecification")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OtherRisksShouldBeConsidered")
                        .HasColumnType("bit");

                    b.Property<string>("OtherTransferTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingTrustConsent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingTrustName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingTrustUkprn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PreviousAdvisoryBoardDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RationaleSectionIsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("RddOrEsfaIntervention")
                        .HasColumnType("bit");

                    b.Property<string>("RddOrEsfaInterventionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificReasonsForTransfer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDateForTransfer")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TransferDatesSectionIsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TransferFirstDiscussed")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrustSponsorRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfTransfer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Urn")
                        .HasColumnType("int");

                    b.Property<string>("WhoInitiatedTheTransfer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferProject", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.TransferringAcademy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DistanceFromAcademyToTrustHq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistanceFromAcademyToTrustHqDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialDeficit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingTrustName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingTrustUkprn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyStage2PerformanceAdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyStage4PerformanceAdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyStage5PerformanceAdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatestOfstedReportAdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MPNameAndParty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingAcademyUkprn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PFIScheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PFISchemeDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishedAdmissionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PupilNumbersAdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ViabilityIssues")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransferProjectId");

                    b.ToTable("TransferringAcademy", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.UserRoleAggregate.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "academisation");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.FormTrust", "FormTrust")
                        .WithOne()
                        .HasForeignKey("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", "FormTrustId");

                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.JoinTrust", "JoinTrust")
                        .WithOne()
                        .HasForeignKey("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", "JoinTrustId");

                    b.Navigation("FormTrust");

                    b.Navigation("JoinTrust");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Contributor", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", null)
                        .WithMany("Contributors")
                        .HasForeignKey("ConversionApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.ContributorDetails", "Details", b1 =>
                        {
                            b1.Property<int>("ContributorId")
                                .HasColumnType("int");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EmailAddress");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("OtherRoleName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("OtherRoleName");

                            b1.Property<int>("Role")
                                .HasColumnType("int")
                                .HasColumnName("Role");

                            b1.HasKey("ContributorId");

                            b1.ToTable("ConversionApplicationContributor", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("ContributorId");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.Lease", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.School", null)
                        .WithMany("Leases")
                        .HasForeignKey("ApplicationSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.Loan", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.School", null)
                        .WithMany("Loans")
                        .HasForeignKey("ApplicationSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.School", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", null)
                        .WithMany("Schools")
                        .HasForeignKey("ConversionApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.SchoolDetails", "Details", b1 =>
                        {
                            b1.Property<int>("SchoolId")
                                .HasColumnType("int");

                            b1.Property<string>("ApplicationJoinTrustReason")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("JoinTrustReason");

                            b1.Property<string>("ApproverContactEmail")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ApproverContactEmail");

                            b1.Property<string>("ApproverContactName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ApproverContactName");

                            b1.Property<string>("CapacityAssumptions")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CapacityAssumptions");

                            b1.Property<int?>("CapacityPublishedAdmissionsNumber")
                                .HasColumnType("int")
                                .HasColumnName("CapacityPublishedAdmissionsNumber");

                            b1.Property<bool?>("ConfirmPaySupportGrantToSchool")
                                .HasColumnType("bit")
                                .HasColumnName("ConfirmPaySupportGrantToSchool");

                            b1.Property<string>("ContactChairEmail")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContactChairEmail");

                            b1.Property<string>("ContactChairName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContactChairName");

                            b1.Property<string>("ContactHeadEmail")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContactHeadEmail");

                            b1.Property<string>("ContactHeadName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContactHeadName");

                            b1.Property<string>("ContactRole")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContactRole");

                            b1.Property<bool?>("ConversionChangeNamePlanned")
                                .HasColumnType("bit")
                                .HasColumnName("ConversionChangeNamePlanned");

                            b1.Property<DateTime?>("ConversionTargetDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ConversionTargetDate");

                            b1.Property<string>("ConversionTargetDateExplained")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ConversionTargetDateExplained");

                            b1.Property<bool?>("ConversionTargetDateSpecified")
                                .HasColumnType("bit")
                                .HasColumnName("ConversionTargetDateSpecified");

                            b1.Property<bool?>("DeclarationBodyAgree")
                                .HasColumnType("bit")
                                .HasColumnName("DeclarationBodyAgree");

                            b1.Property<bool?>("DeclarationIAmTheChairOrHeadteacher")
                                .HasColumnType("bit")
                                .HasColumnName("DeclarationIAmTheChairOrHeadteacher");

                            b1.Property<string>("DeclarationSignedByName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeclarationSignedByName");

                            b1.Property<bool?>("FinanceOngoingInvestigations")
                                .HasColumnType("bit")
                                .HasColumnName("FinanceOngoingInvestigations");

                            b1.Property<string>("FinancialInvestigationsExplain")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FinancialInvestigationsExplain");

                            b1.Property<bool?>("FinancialInvestigationsTrustAware")
                                .HasColumnType("bit")
                                .HasColumnName("FinancialInvestigationsTrustAware");

                            b1.Property<string>("MainContactOtherEmail")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MainContactOtherEmail");

                            b1.Property<string>("MainContactOtherName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MainContactOtherName");

                            b1.Property<string>("MainContactOtherRole")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MainContactOtherRole");

                            b1.Property<int?>("ProjectedPupilNumbersYear1")
                                .HasColumnType("int")
                                .HasColumnName("ProjectedPupilNumbersYear1");

                            b1.Property<int?>("ProjectedPupilNumbersYear2")
                                .HasColumnType("int")
                                .HasColumnName("ProjectedPupilNumbersYear2");

                            b1.Property<int?>("ProjectedPupilNumbersYear3")
                                .HasColumnType("int")
                                .HasColumnName("ProjectedPupilNumbersYear3");

                            b1.Property<string>("ProposedNewSchoolName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProposedNewSchoolName");

                            b1.Property<string>("SchoolConversionReasonsForJoining")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolConversionReasonsForJoining");

                            b1.Property<bool?>("SchoolHasConsultedStakeholders")
                                .HasColumnType("bit")
                                .HasColumnName("SchoolHasConsultedStakeholders");

                            b1.Property<string>("SchoolName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolName");

                            b1.Property<string>("SchoolPlanToConsultStakeholders")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolPlanToConsultStakeholders");

                            b1.Property<int?>("SchoolSupportGrantFundsPaidTo")
                                .HasColumnType("int")
                                .HasColumnName("SupportGrantFundsPaidTo");

                            b1.Property<int>("Urn")
                                .HasColumnType("int")
                                .HasColumnName("Urn");

                            b1.HasKey("SchoolId");

                            b1.ToTable("ApplicationSchool", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("SchoolId");

                            b1.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.LandAndBuildings", "LandAndBuildings", b2 =>
                                {
                                    b2.Property<int>("SchoolDetailsSchoolId")
                                        .HasColumnType("int");

                                    b2.Property<bool?>("FacilitiesShared")
                                        .HasColumnType("bit")
                                        .HasColumnName("FacilitiesShared");

                                    b2.Property<string>("FacilitiesSharedExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("FacilitiesSharedExplained");

                                    b2.Property<bool?>("Grants")
                                        .HasColumnType("bit")
                                        .HasColumnName("Grants");

                                    b2.Property<string>("GrantsAwardingBodies")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("GrantsAwardingBodies");

                                    b2.Property<string>("OwnerExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("OwnerExplained");

                                    b2.Property<bool?>("PartOfBuildingSchoolsForFutureProgramme")
                                        .HasColumnType("bit")
                                        .HasColumnName("PartOfBuildingSchoolsForFutureProgramme");

                                    b2.Property<bool?>("PartOfPfiScheme")
                                        .HasColumnType("bit")
                                        .HasColumnName("PartOfPfiScheme");

                                    b2.Property<string>("PartOfPfiSchemeType")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PartOfPfiSchemeType");

                                    b2.Property<bool?>("PartOfPrioritySchoolsBuildingProgramme")
                                        .HasColumnType("bit")
                                        .HasColumnName("PartOfPrioritySchoolsBuildingProgramme");

                                    b2.Property<bool?>("WorksPlanned")
                                        .HasColumnType("bit")
                                        .HasColumnName("WorksPlanned");

                                    b2.Property<DateTime?>("WorksPlannedDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("WorksPlannedDate");

                                    b2.Property<string>("WorksPlannedExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("WorksPlannedExplained");

                                    b2.HasKey("SchoolDetailsSchoolId");

                                    b2.ToTable("ApplicationSchool", "academisation");

                                    b2.WithOwner()
                                        .HasForeignKey("SchoolDetailsSchoolId");
                                });

                            b1.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.FinancialYear", "CurrentFinancialYear", b2 =>
                                {
                                    b2.Property<int>("SchoolDetailsSchoolId")
                                        .HasColumnType("int");

                                    b2.Property<decimal?>("CapitalCarryForward")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("CurrentFinancialYearCapitalCarryForward");

                                    b2.Property<string>("CapitalCarryForwardExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("CurrentFinancialYearCapitalCarryForwardExplained");

                                    b2.Property<string>("CapitalCarryForwardFileLink")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("CurrentFinancialYearCapitalCarryForwardFileLink");

                                    b2.Property<int?>("CapitalCarryForwardStatus")
                                        .HasColumnType("int")
                                        .HasColumnName("CurrentFinancialYearCapitalCarryForwardStatus");

                                    b2.Property<DateTime?>("FinancialYearEndDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("CurrentFinancialYearEndDate");

                                    b2.Property<decimal?>("Revenue")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("CurrentFinancialYearRevenue");

                                    b2.Property<int?>("RevenueStatus")
                                        .HasColumnType("int")
                                        .HasColumnName("CurrentFinancialYearRevenueStatus");

                                    b2.Property<string>("RevenueStatusExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("CurrentFinancialYearRevenueStatusExplained");

                                    b2.Property<string>("RevenueStatusFileLink")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("CurrentFinancialYearRevenueStatusFileLink");

                                    b2.HasKey("SchoolDetailsSchoolId");

                                    b2.ToTable("ApplicationSchool", "academisation");

                                    b2.WithOwner()
                                        .HasForeignKey("SchoolDetailsSchoolId");
                                });

                            b1.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.FinancialYear", "NextFinancialYear", b2 =>
                                {
                                    b2.Property<int>("SchoolDetailsSchoolId")
                                        .HasColumnType("int");

                                    b2.Property<decimal?>("CapitalCarryForward")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("NextFinancialYearCapitalCarryForward");

                                    b2.Property<string>("CapitalCarryForwardExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("NextFinancialYearCapitalCarryForwardExplained");

                                    b2.Property<string>("CapitalCarryForwardFileLink")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("NextFinancialYearCapitalCarryForwardFileLink");

                                    b2.Property<int?>("CapitalCarryForwardStatus")
                                        .HasColumnType("int")
                                        .HasColumnName("NextFinancialYearCapitalCarryForwardStatus");

                                    b2.Property<DateTime?>("FinancialYearEndDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("NextFinancialYearEndDate");

                                    b2.Property<decimal?>("Revenue")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("NextFinancialYearRevenue");

                                    b2.Property<int?>("RevenueStatus")
                                        .HasColumnType("int")
                                        .HasColumnName("NextFinancialYearRevenueStatus");

                                    b2.Property<string>("RevenueStatusExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("NextFinancialYearRevenueStatusExplained");

                                    b2.Property<string>("RevenueStatusFileLink")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("NextFinancialYearRevenueStatusFileLink");

                                    b2.HasKey("SchoolDetailsSchoolId");

                                    b2.ToTable("ApplicationSchool", "academisation");

                                    b2.WithOwner()
                                        .HasForeignKey("SchoolDetailsSchoolId");
                                });

                            b1.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.FinancialYear", "PreviousFinancialYear", b2 =>
                                {
                                    b2.Property<int>("SchoolDetailsSchoolId")
                                        .HasColumnType("int");

                                    b2.Property<decimal?>("CapitalCarryForward")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("PreviousFinancialYearCapitalCarryForward");

                                    b2.Property<string>("CapitalCarryForwardExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PreviousFinancialYearCapitalCarryForwardExplained");

                                    b2.Property<string>("CapitalCarryForwardFileLink")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PreviousFinancialYearCapitalCarryForwardFileLink");

                                    b2.Property<int?>("CapitalCarryForwardStatus")
                                        .HasColumnType("int")
                                        .HasColumnName("PreviousFinancialYearCapitalCarryForwardStatus");

                                    b2.Property<DateTime?>("FinancialYearEndDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("PreviousFinancialYearEndDate");

                                    b2.Property<decimal?>("Revenue")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("PreviousFinancialYearRevenue");

                                    b2.Property<int?>("RevenueStatus")
                                        .HasColumnType("int")
                                        .HasColumnName("PreviousFinancialYearRevenueStatus");

                                    b2.Property<string>("RevenueStatusExplained")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PreviousFinancialYearRevenueStatusExplained");

                                    b2.Property<string>("RevenueStatusFileLink")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PreviousFinancialYearRevenueStatusFileLink");

                                    b2.HasKey("SchoolDetailsSchoolId");

                                    b2.ToTable("ApplicationSchool", "academisation");

                                    b2.WithOwner()
                                        .HasForeignKey("SchoolDetailsSchoolId");
                                });

                            b1.Navigation("CurrentFinancialYear");

                            b1.Navigation("LandAndBuildings");

                            b1.Navigation("NextFinancialYear");

                            b1.Navigation("PreviousFinancialYear");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.FormTrust", b =>
                {
                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ApplicationAggregate.FormTrustDetails", "TrustDetails", b1 =>
                        {
                            b1.Property<int>("FormTrustId")
                                .HasColumnType("int");

                            b1.Property<bool?>("FormTrustGrowthPlansYesNo")
                                .HasColumnType("bit")
                                .HasColumnName("FormTrustGrowthPlansYesNo");

                            b1.Property<string>("FormTrustImprovementApprovedSponsor")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustImprovementApprovedSponsor");

                            b1.Property<string>("FormTrustImprovementStrategy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustImprovementStrategy");

                            b1.Property<string>("FormTrustImprovementSupport")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustImprovementSupport");

                            b1.Property<DateTime?>("FormTrustOpeningDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("FormTrustOpeningDate");

                            b1.Property<string>("FormTrustPlanForGrowth")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustPlanForGrowth");

                            b1.Property<string>("FormTrustPlansForNoGrowth")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustPlansForNoGrowth");

                            b1.Property<string>("FormTrustProposedNameOfTrust")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustProposedNameOfTrust");

                            b1.Property<bool?>("FormTrustReasonApprovaltoConvertasSAT")
                                .HasColumnType("bit")
                                .HasColumnName("FormTrustReasonApprovaltoConvertasSAT");

                            b1.Property<string>("FormTrustReasonApprovedPerson")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustReasonApprovedPerson");

                            b1.Property<string>("FormTrustReasonForming")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustReasonForming");

                            b1.Property<string>("FormTrustReasonFreedom")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustReasonFreedom");

                            b1.Property<string>("FormTrustReasonGeoAreas")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustReasonGeoAreas");

                            b1.Property<string>("FormTrustReasonImproveTeaching")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustReasonImproveTeaching");

                            b1.Property<string>("FormTrustReasonVision")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FormTrustReasonVision");

                            b1.Property<string>("TrustApproverEmail")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TrustApproverEmail");

                            b1.Property<string>("TrustApproverName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TrustApproverName");

                            b1.HasKey("FormTrustId");

                            b1.ToTable("ApplicationFormTrust", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("FormTrustId");
                        });

                    b.Navigation("TrustDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.TrustKeyPerson", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.FormTrust", null)
                        .WithMany("KeyPeople")
                        .HasForeignKey("ApplicationFormTrustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.TrustKeyPersonRole", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.TrustKeyPerson", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationFormTrustKeyPersonRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", b =>
                {
                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDecisionDetails", "AdvisoryBoardDecisionDetails", b1 =>
                        {
                            b1.Property<int>("ConversionAdvisoryBoardDecisionId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("AcademyOrderDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("AcademyOrderDate");

                            b1.Property<DateTime>("AdvisoryBoardDecisionDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("AdvisoryBoardDecisionDate");

                            b1.Property<string>("ApprovedConditionsDetails")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ApprovedConditionsDetails");

                            b1.Property<bool?>("ApprovedConditionsSet")
                                .HasColumnType("bit")
                                .HasColumnName("ApprovedConditionsSet");

                            b1.Property<int?>("ConversionProjectId")
                                .HasColumnType("int")
                                .HasColumnName("ConversionProjectId");

                            b1.Property<string>("Decision")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Decision");

                            b1.Property<string>("DecisionMadeBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DecisionMadeBy");

                            b1.Property<string>("DecisionMakerName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DecisionMakerName");

                            b1.Property<int?>("TransferProjectId")
                                .HasColumnType("int")
                                .HasColumnName("TransferProjectId");

                            b1.HasKey("ConversionAdvisoryBoardDecisionId");

                            b1.ToTable("ConversionAdvisoryBoardDecision", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("ConversionAdvisoryBoardDecisionId");
                        });

                    b.Navigation("AdvisoryBoardDecisionDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDAORevokedReasonDetails", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", null)
                        .WithMany("DaoRevokedReasons")
                        .HasForeignKey("AdvisoryBoardDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDeclinedReasonDetails", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", null)
                        .WithMany("DeclinedReasons")
                        .HasForeignKey("AdvisoryBoardDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardDeferredReasonDetails", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", null)
                        .WithMany("DeferredReasons")
                        .HasForeignKey("AdvisoryBoardDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ConversionAdvisoryBoardDecisionAggregate.AdvisoryBoardWithdrawnReasonDetails", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", null)
                        .WithMany("WithdrawnReasons")
                        .HasForeignKey("AdvisoryBoardDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.ProjectNote", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ProjectAggregate.Project", null)
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.FormAMatProjectAggregate.FormAMatProject", b =>
                {
                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.User", "AssignedUser", b1 =>
                        {
                            b1.Property<int>("FormAMatProjectId")
                                .HasColumnType("int");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AssignedUserEmailAddress");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AssignedUserFullName");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AssignedUserId");

                            b1.HasKey("FormAMatProjectId");

                            b1.ToTable("FormAMatProject", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("FormAMatProjectId");
                        });

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectAggregate.Project", b =>
                {
                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.ProjectDetails", "Details", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("int");

                            b1.Property<string>("AcademyTypeAndRoute")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AcademyTypeAndRoute");

                            b1.Property<int?>("ActualPupilNumbers")
                                .HasColumnType("int")
                                .HasColumnName("ActualPupilNumbers");

                            b1.Property<string>("AgeRange")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AgeRange");

                            b1.Property<bool?>("AnnexBFormReceived")
                                .HasColumnType("bit")
                                .HasColumnName("AnnexBFormReceived");

                            b1.Property<string>("AnnexBFormUrl")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AnnexBFormUrl");

                            b1.Property<DateTime?>("ApplicationReceivedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ApplicationReceivedDate");

                            b1.Property<string>("ApplicationReferenceNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ApplicationReferenceNumber");

                            b1.Property<DateTime?>("AssignedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("AssignedDate");

                            b1.Property<string>("Author")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Author");

                            b1.Property<DateTime?>("BaselineDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BaselineDate");

                            b1.Property<int?>("Capacity")
                                .HasColumnType("int")
                                .HasColumnName("Capacity");

                            b1.Property<decimal?>("CapitalCarryForwardAtEndMarchCurrentYear")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CapitalCarryForwardAtEndMarchCurrentYear");

                            b1.Property<decimal?>("CapitalCarryForwardAtEndMarchNextYear")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CapitalCarryForwardAtEndMarchNextYear");

                            b1.Property<string>("ClearedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ClearedBy");

                            b1.Property<string>("Consultation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Consultation");

                            b1.Property<decimal?>("ConversionSupportGrantAmount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ConversionSupportGrantAmount");

                            b1.Property<bool?>("ConversionSupportGrantAmountChanged")
                                .HasColumnType("bit")
                                .HasColumnName("ConversionSupportGrantAmountChanged");

                            b1.Property<string>("ConversionSupportGrantChangeReason")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ConversionSupportGrantChangeReason");

                            b1.Property<string>("ConversionSupportGrantEnvironmentalImprovementGrant")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ConversionSupportGrantEnvironmentalImprovementGrant");

                            b1.Property<string>("ConversionSupportGrantNumberOfSites")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ConversionSupportGrantType")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ConversionSupportGrantType");

                            b1.Property<DateTime?>("DaoPackSentDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("DaoPackSentDate");

                            b1.Property<string>("DiocesanConsent")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DiocesanConsent");

                            b1.Property<string>("DiocesanTrust")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DiocesanTrust");

                            b1.Property<decimal?>("DistanceFromSchoolToTrustHeadquarters")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DistanceFromSchoolToTrustHeadquarters");

                            b1.Property<string>("DistanceFromSchoolToTrustHeadquartersAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DistanceFromSchoolToTrustHeadquartersAdditionalInformation");

                            b1.Property<string>("EducationalAttendanceAdditionalInformation")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("EndOfCurrentFinancialYear")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndOfCurrentFinancialYear");

                            b1.Property<DateTime?>("EndOfNextFinancialYear")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndOfNextFinancialYear");

                            b1.Property<bool?>("ExternalApplicationFormSaved")
                                .HasColumnType("bit")
                                .HasColumnName("ExternalApplicationFormSaved");

                            b1.Property<string>("ExternalApplicationFormUrl")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ExternalApplicationFormUrl");

                            b1.Property<string>("FinancialDeficit")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FinancialDeficit");

                            b1.Property<string>("Form7Received")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Form7Received");

                            b1.Property<DateTime?>("Form7ReceivedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("Form7ReceivedDate");

                            b1.Property<string>("FoundationConsent")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FoundationConsent");

                            b1.Property<string>("GoverningBodyResolution")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GoverningBodyResolution");

                            b1.Property<DateTime?>("HeadTeacherBoardDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("HeadTeacherBoardDate");

                            b1.Property<int?>("IfdPipelineId")
                                .HasColumnType("int")
                                .HasColumnName("IfdPipelineId");

                            b1.Property<bool?>("IsFormAMat")
                                .HasColumnType("bit")
                                .HasColumnName("IsFormAMat");

                            b1.Property<string>("KeyStage2PerformanceAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("KeyStage2PerformanceAdditionalInformation");

                            b1.Property<string>("KeyStage4PerformanceAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("KeyStage4PerformanceAdditionalInformation");

                            b1.Property<string>("KeyStage5PerformanceAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("KeyStage5PerformanceAdditionalInformation");

                            b1.Property<bool?>("LegalRequirementsSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("LegalRequirementsSectionComplete");

                            b1.Property<string>("LocalAuthority")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LocalAuthority");

                            b1.Property<string>("LocalAuthorityInformationTemplateComments")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LocalAuthorityInformationTemplateComments");

                            b1.Property<string>("LocalAuthorityInformationTemplateLink")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LocalAuthorityInformationTemplateLink");

                            b1.Property<DateTime?>("LocalAuthorityInformationTemplateReturnedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LocalAuthorityInformationTemplateReturnedDate");

                            b1.Property<bool?>("LocalAuthorityInformationTemplateSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("LocalAuthorityInformationTemplateSectionComplete");

                            b1.Property<DateTime?>("LocalAuthorityInformationTemplateSentDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LocalAuthorityInformationTemplateSentDate");

                            b1.Property<string>("MemberOfParliamentNameAndParty")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MemberOfParliamentNameAndParty");

                            b1.Property<string>("NameOfTrust")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NameOfTrust");

                            b1.Property<int?>("NumberOfAlternativeProvisionPlaces")
                                .HasColumnType("int");

                            b1.Property<decimal?>("NumberOfFundedResidentialPlaces")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int?>("NumberOfMedicalPlaces")
                                .HasColumnType("int");

                            b1.Property<decimal?>("NumberOfPlacesFundedFor")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int?>("NumberOfPost16Places")
                                .HasColumnType("int");

                            b1.Property<decimal?>("NumberOfResidentialPlaces")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int?>("NumberOfSENUnitPlaces")
                                .HasColumnType("int");

                            b1.Property<string>("PartOfPfiScheme")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartOfPfiScheme");

                            b1.Property<decimal?>("PercentageFreeSchoolMeals")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PercentageFreeSchoolMeals");

                            b1.Property<decimal?>("PercentageOfGoodOrOutstandingSchoolsInTheDiocesanTrust")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PercentageOfGoodOrOutstandingSchoolsInTheDiocesanTrust");

                            b1.Property<string>("PfiSchemeDetails")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PfiSchemeDetails");

                            b1.Property<DateTime?>("PreviousHeadTeacherBoardDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("PreviousHeadTeacherBoardDate");

                            b1.Property<string>("PreviousHeadTeacherBoardDateQuestion")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PreviousHeadTeacherBoardDateQuestion");

                            b1.Property<string>("PreviousHeadTeacherBoardLink")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PreviousHeadTeacherBoardLink");

                            b1.Property<bool?>("ProjectDatesSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("ProjectDatesSectionComplete");

                            b1.Property<string>("ProjectStatus")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProjectStatus");

                            b1.Property<decimal?>("ProjectedRevenueBalanceAtEndMarchNextYear")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ProjectedRevenueBalanceAtEndMarchNextYear");

                            b1.Property<DateTime?>("ProposedConversionDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ProposedAcademyOpeningDate");

                            b1.Property<string>("PublishedAdmissionNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PublishedAdmissionNumber");

                            b1.Property<bool?>("PupilsAttendingGroupMedicalAndHealthNeeds")
                                .HasColumnType("bit");

                            b1.Property<bool?>("PupilsAttendingGroupPermanentlyExcluded")
                                .HasColumnType("bit");

                            b1.Property<bool?>("PupilsAttendingGroupTeenageMums")
                                .HasColumnType("bit");

                            b1.Property<string>("RationaleForProject")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RationaleForProject");

                            b1.Property<string>("RationaleForTrust")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RationaleForTrust");

                            b1.Property<bool?>("RationaleSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("RationaleSectionComplete");

                            b1.Property<string>("RecommendationForProject")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RecommendationForProject");

                            b1.Property<string>("Region")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Region");

                            b1.Property<decimal?>("RevenueCarryForwardAtEndMarchCurrentYear")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("RevenueCarryForwardAtEndMarchCurrentYear");

                            b1.Property<string>("RisksAndIssues")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RisksAndIssues");

                            b1.Property<bool?>("RisksAndIssuesSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("RisksAndIssuesSectionComplete");

                            b1.Property<bool?>("SchoolAndTrustInformationSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("SchoolAndTrustInformationSectionComplete");

                            b1.Property<string>("SchoolBudgetInformationAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolBudgetInformationAdditionalInformation");

                            b1.Property<bool?>("SchoolBudgetInformationSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("SchoolBudgetInformationSectionComplete");

                            b1.Property<string>("SchoolName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolName");

                            b1.Property<bool?>("SchoolOverviewSectionComplete")
                                .HasColumnType("bit")
                                .HasColumnName("SchoolOverviewSectionComplete");

                            b1.Property<string>("SchoolPerformanceAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolPerformanceAdditionalInformation");

                            b1.Property<string>("SchoolPhase")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolPhase");

                            b1.Property<string>("SchoolPupilForecastsAdditionalInformation")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolPupilForecastsAdditionalInformation");

                            b1.Property<string>("SchoolType")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SchoolType");

                            b1.Property<string>("SponsorName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SponsorName");

                            b1.Property<string>("SponsorReferenceNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SponsorReferenceNumber");

                            b1.Property<string>("TrustReferenceNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TrustReferenceNumber");

                            b1.Property<int>("Urn")
                                .HasColumnType("int")
                                .HasColumnName("Urn");

                            b1.Property<string>("Version")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Version");

                            b1.Property<string>("ViabilityIssues")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ViabilityIssues");

                            b1.Property<int?>("YearOneProjectedCapacity")
                                .HasColumnType("int")
                                .HasColumnName("YearOneProjectedCapacity");

                            b1.Property<int?>("YearOneProjectedPupilNumbers")
                                .HasColumnType("int")
                                .HasColumnName("YearOneProjectedPupilNumbers");

                            b1.Property<int?>("YearThreeProjectedCapacity")
                                .HasColumnType("int")
                                .HasColumnName("YearThreeProjectedCapacity");

                            b1.Property<int?>("YearThreeProjectedPupilNumbers")
                                .HasColumnType("int")
                                .HasColumnName("YearThreeProjectedPupilNumbers");

                            b1.Property<int?>("YearTwoProjectedCapacity")
                                .HasColumnType("int")
                                .HasColumnName("YearTwoProjectedCapacity");

                            b1.Property<int?>("YearTwoProjectedPupilNumbers")
                                .HasColumnType("int")
                                .HasColumnName("YearTwoProjectedPupilNumbers");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Project", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");

                            b1.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.User", "AssignedUser", b2 =>
                                {
                                    b2.Property<int>("ProjectDetailsProjectId")
                                        .HasColumnType("int");

                                    b2.Property<string>("EmailAddress")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("AssignedUserEmailAddress");

                                    b2.Property<string>("FullName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("AssignedUserFullName");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("AssignedUserId");

                                    b2.HasKey("ProjectDetailsProjectId");

                                    b2.ToTable("Project", "academisation");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectDetailsProjectId");
                                });

                            b1.Navigation("AssignedUser");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectAggregate.SchoolImprovementPlan", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.ProjectAggregate.Project", null)
                        .WithMany("SchoolImprovementPlans")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectGroupsAggregate.ProjectGroup", b =>
                {
                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.User", "AssignedUser", b1 =>
                        {
                            b1.Property<int>("ProjectGroupId")
                                .HasColumnType("int");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AssignedUserEmailAddress");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AssignedUserFullName");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AssignedUserId");

                            b1.HasKey("ProjectGroupId");

                            b1.ToTable("ProjectGroups", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("ProjectGroupId");
                        });

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.IntendedTransferBenefit", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.TransferProject", null)
                        .WithMany("IntendedTransferBenefits")
                        .HasForeignKey("TransferProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.TransferringAcademy", b =>
                {
                    b.HasOne("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.TransferProject", null)
                        .WithMany("TransferringAcademies")
                        .HasForeignKey("TransferProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.UserRoleAggregate.UserRole", b =>
                {
                    b.OwnsOne("Dfe.Academies.Academisation.Domain.Core.ProjectAggregate.User", "AssignedUser", b1 =>
                        {
                            b1.Property<int>("UserRoleId")
                                .HasColumnType("int");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AssignedUserEmailAddress");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AssignedUserFullName");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AssignedUserId");

                            b1.HasKey("UserRoleId");

                            b1.ToTable("UserRoles", "academisation");

                            b1.WithOwner()
                                .HasForeignKey("UserRoleId");
                        });

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Application", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Schools.School", b =>
                {
                    b.Navigation("Leases");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.FormTrust", b =>
                {
                    b.Navigation("KeyPeople");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ApplicationAggregate.Trusts.TrustKeyPerson", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ConversionAdvisoryBoardDecisionAggregate.ConversionAdvisoryBoardDecision", b =>
                {
                    b.Navigation("DaoRevokedReasons");

                    b.Navigation("DeclinedReasons");

                    b.Navigation("DeferredReasons");

                    b.Navigation("WithdrawnReasons");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.ProjectAggregate.Project", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("SchoolImprovementPlans");
                });

            modelBuilder.Entity("Dfe.Academies.Academisation.Domain.TransferProjectAggregate.TransferProject", b =>
                {
                    b.Navigation("IntendedTransferBenefits");

                    b.Navigation("TransferringAcademies");
                });
#pragma warning restore 612, 618
        }
    }
}
